<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper
PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN"
"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace = "dev.mvc.film.FilmDAOInter">

<!-- 영화 레코드 등록  -->
<insert id="create" parameterType="FilmVO">
  <selectKey keyProperty="filmno" resultType="int" order="BEFORE">
      SELECT film_seq.nextval FROM dual
  </selectKey> 
  INSERT INTO film(filmno, titlekr, titleen, lan, year, len, summary, restrict, dirno,
                          youtube, url, poster, posterthumb, postersize)
  VALUES (#{filmno}, #{titlekr}, #{titleen}, #{lan}, #{year}, #{len}, #{summary}, #{restrict}, #{dirno, jdbcType=INTEGER},
              #{youtube}, #{url}, #{poster}, #{posterthumb}, #{postersize})
</insert>

<!-- 목록 -->
<select id="list" resultType="FilmVO">
  SELECT filmno, titlekr, titleen, lan, year, len, summary, restrict, dirno, poster, restrict
  FROM film
  ORDER BY filmno
</select>


<!-- 페이징 + 검색 (화질, 언어, 장르) 갯수-->
<select id="search_count" resultType="int" parameterType="HashMap">
  SELECT  COUNT(filmno) as cnt
  FROM (
              SELECT DISTINCT f.filmno
              FROM film f, quality q, language l, genre g, filmgenre x            
              WHERE f.filmno = q.filmno AND f.filmno = l.filmno AND f.filmno = x.filmno AND g.genreno = x.genreno
              <choose>
              <when test="search_genre == null || search_genre.equals('')"> </when>
              <otherwise> AND g.genrename = #{search_genre} </otherwise> 
             </choose>
             <choose> <when test="search_quality == null || search_quality.equals('')"> </when>
              <otherwise> AND ${search_quality} =1 </otherwise> 
             </choose>
             <choose> <when test="search_language == null || search_language.equals('')"> </when>
              <otherwise> AND ${search_language} =1 </otherwise> 
             </choose>
              ORDER BY filmno DESC
          )     
</select>


<!-- 페이징 + 검색 (화질, 언어, 장르) -->
<select id="list_paging_search" resultType="FilmVO" parameterType="HashMap">
  SELECT filmno
  FROM ( 
            SELECT filmno,  rownum as r
            FROM (
                        SELECT DISTINCT f.filmno                      
                        FROM film f, quality q, language l, genre g, filmgenre x            
                        WHERE f.filmno = q.filmno AND f.filmno = l.filmno AND f.filmno = x.filmno AND g.genreno = x.genreno 
                        <choose>
                          <when test="search_genre == null || search_genre.equals('')"> </when>
                          <otherwise> AND g.genrename = #{search_genre} </otherwise> 
                        </choose>
                        <choose> <when test="search_quality == null || search_quality.equals('')"> </when>
                          <otherwise> AND ${search_quality} =1 </otherwise> 
                        </choose>
                        <choose> <when test="search_language == null || search_language.equals('')"> </when>
                          <otherwise> AND ${search_language} =1 </otherwise> 
                        </choose>
                        ORDER BY filmno DESC
                      )          
           )
  WHERE <![CDATA[ r >= #{startNum, jdbcType=INTEGER} AND r <= #{endNum, jdbcType=INTEGER} ]]>
</select>


<!-- 6개 레코드 최신순목록 (메인 페이지용 ) -->
<select id="list_6_main" resultType="FilmVO">
  SELECT filmno, titlekr, poster, hit
  FROM film
  WHERE ROWNUM <![CDATA[ <= ]]> 6
  ORDER BY filmno DESC
</select>

<!-- 조회 -->
<select id="read" resultType="FilmVO" parameterType="int">
  SELECT filmno, 
            titlekr, titleen, 
            lan, year, len, dirno,
            summary, restrict,
            youtube, url, 
            poster, posterthumb, postersize,
            filmseq, hit
  FROM film
  WHERE filmno = #{filmno}
</select>

<!-- 수정 -->
<update id="update" parameterType="FilmVO" >
  UPDATE film
  SET titlekr=#{titlekr, jdbcType=VARCHAR}, titleen=#{titleen, jdbcType=VARCHAR}, 
        lan=#{lan, jdbcType=VARCHAR}, year=#{year, jdbcType=INTEGER}, len=#{len, jdbcType=INTEGER}, dirno=#{dirno, jdbcType=INTEGER},
        summary=#{summary, jdbcType=VARCHAR}, restrict=#{restrict, jdbcType=INTEGER}, 
        youtube=#{youtube, jdbcType=VARCHAR}, url=#{url, jdbcType=INTEGER}, 
        poster=#{poster, jdbcType=VARCHAR}, posterthumb=#{posterthumb, jdbcType=VARCHAR}, postersize =#{postersize, jdbcType=INTEGER}
  WHERE filmno = #{filmno, jdbcType=INTEGER}
</update>

<!-- 평점 평균 수정 -->
<update id="update_rate" parameterType="int">
  UPDATE film
  SET hit = (
                  SELECT NVL(AVG(rate), 0)
                  FROM review
                  WHERE filmno = #{filmno, jdbcType=INTEGER}
               )
  WHERE filmno = #{filmno, jdbcType=INTEGER}
</update>

<!-- 삭제 -->
<delete id="delete" parameterType="int">
  DELETE 
  FROM film
  WHERE filmno= #{filmno}
</delete>




</mapper>